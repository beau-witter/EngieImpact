# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Local

variables:
  - group: Terraform
  - name: buildId
    value: $(Build.BuildId)

steps:
- task: Docker@2
  inputs:
    containerRegistry: 'Docker Container'
    command: 'login'
    
- task: Docker@2
  inputs:
    containerRegistry: 'Docker Container'
    repository: 'moon'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(buildId)
      latest
    arguments: '--no-cache'

- task: Docker@2
  inputs:
    containerRegistry: 'Docker Container'
    repository: 'moon'
    command: 'push'
    tags: |
      $(buildId)
      latest
      
- task: TerraformInstaller@0
  inputs:
    terraformVersion: '0.14.11'
    
- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'init'
    commandOptions: '-reconfigure'
    backendServiceArm: 'Personal - myTFResourceGroup'
    backendAzureRmResourceGroupName: 'myTFResourceGroup'
    backendAzureRmStorageAccountName: 'mytstorageaccount'
    backendAzureRmContainerName: 'terraform'
    backendAzureRmKey: 'terraform.tfstate'
    
- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=tfplan -var="imagetag=$(buildId)"'
    environmentServiceNameAzureRM: 'Personal - myTFResourceGroup'

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-auto-approve -var="imagetag=$(buildId)" tfplan'
    environmentServiceNameAzureRM: 'Personal - myTFResourceGroup'